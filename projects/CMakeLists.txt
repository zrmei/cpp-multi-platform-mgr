cmake_minimum_required(VERSION 3.13)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)
SET(CMAKE_COLOR_MAKEFILE ON)
CMAKE_POLICY(SET CMP0048 NEW)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

SET(CMAKE_SKIP_RPATH FALSE)
SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
SET(CMAKE_INSTALL_RPATH "\$ORIGIN:\$ORIGIN/libs")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)

# 引入自定义的函数文件
include(cmake/env_detect.cmake)

########################################################################################################################
# 设置输出路径
if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    SET(LINK_LIB_DIR ${CMAKE_CURRENT_LIST_DIR}/thirdparty/libs/windows/${PLATFORM})
    SET(AIUI_LIBRARY_TYPE ${PLATFORM})
    if (MSVC)
        SET(TOOLSET_VERSION ${MSVC_TOOLSET_VERSION})
    ELSE (MSVC)
        SET(TOOLSET_VERSION ${CMAKE_CXX_COMPILER_VERSION})
    ENDIF (MSVC)
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(AIUI_LIBRARY_TYPE ${PLATFORM})
    SET(TOOLSET_VERSION ${CMAKE_CXX_COMPILER_ID}_${CMAKE_CXX_COMPILER_VERSION})
    SET(LINK_LIB_DIR ${CMAKE_CURRENT_LIST_DIR}/thirdparty/libs/linux/${PLATFORM})
    SET(AIUI_LIBRARY_TYPE ${PLATFORM})
elseif (CMAKE_SYSTEM_NAME MATCHES "Android")
    SET(LINK_LIB_DIR ${CMAKE_CURRENT_LIST_DIR}/thirdparty/libs/android/${ANDROID_ABI})
    SET(AIUI_LIBRARY_TYPE ${ANDROID_ABI})
    SET(TOOLSET_VERSION ${ANDROID_NATIVE_API_LEVEL}_${CMAKE_CXX_COMPILER_ID}_${CMAKE_CXX_COMPILER_VERSION})
endif ()

IF (NOT MSVC)
    SET(OUTPUT_DIR_NAME ${CMAKE_BUILD_TYPE})
ENDIF (NOT MSVC)

IF (DEFINED BUILD_OUTPUT_DIRECTORY_PATH)
    SET(EXECUTABLE_OUTPUT_PATH ${BUILD_OUTPUT_DIRECTORY_PATH}/)
ELSE ()
    # 输出目录友好名称
    if (DEFINED FRIEND_NAME)
        set(AIUI_LIBRARY_TYPE ${FRIEND_NAME}_${AIUI_LIBRARY_TYPE})
    endif ()
    SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_LIST_DIR}/../output/${CMAKE_SYSTEM_NAME}/${AIUI_LIBRARY_TYPE}_${TOOLSET_VERSION}/${OUTPUT_DIR_NAME})
ENDIF ()

SET(LIBRARY_OUTPUT_PATH ${EXECUTABLE_OUTPUT_PATH})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})

MESSAGE(STATUS "Output Dir: " ${LIBRARY_OUTPUT_PATH})
########################################################################################################################

if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    MESSAGE(STATUS "build on Windows")
    CheckForWindowsPlatform()

    add_definitions(-DHAVE_WINDOWS_OS -DAIUI_WINDOWS)

ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "build on Linux")
    CheckForLinuxPlatform()

    add_definitions(-DHAVE_UNIX_OS -DAIUI_LINUX)

ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Android")
    MESSAGE(STATUS "build on Android")
    CheckForAndroidPlatform()

    add_definitions(-DHAVE_ANDROID_OS -DAIUI_ANDROID)

endif ()

set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG} ")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} ")

set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_MINSIZEREL}")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELWITHDEBINFO}")

set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_MINSIZEREL}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")

string(TOUPPER CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE} CURRENT_C_BUILD_TYPE)
MESSAGE(STATUS "Build c defines: ${${CURRENT_C_BUILD_TYPE}}")

string(TOUPPER CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE} CURRENT_CXX_BUILD_TYPE)
MESSAGE(STATUS "Build cxx defines: ${${CURRENT_CXX_BUILD_TYPE}}")

if(DEFINED PROJECT_DIRNAME)
    add_subdirectory(projects/${PROJECT_DIRNAME})
else()
    message(FATAL_ERROR "PLease setup PROJECT_DIRNAME in local.properties")
endif()