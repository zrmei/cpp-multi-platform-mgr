apply plugin: "net.freudasoft.gradle-cmake-plugin"

cmake {
    Properties localProperties = getCombinedProperties(["local", "android"])

    def cmake_exe_subfix = isWindows() ? ".exe" : "";

    def cmakeDir = localProperties.getProperty("cmake.dir", "${rootProject.projectDir}/tools/cmake")
    executable = "$cmakeDir/bin/cmake${cmake_exe_subfix}"

    def ndkDir = localProperties.getProperty("ndk.dir", "")

    if(ndkDir.isEmpty()) {
        println "Please setup ndk.dir for Android build..."
        return
    }

    sourceFolder = projectDir

    def ndkApiLevel = localProperties.getProperty("ndk.api.level", "19")
    def ndkToolchain = localProperties.getProperty("ndk.toolchain", "gcc")
    def ndkstl = localProperties.getProperty("ndk.stl", "gnustl_static")

    options.CMAKE_BUILD_TYPE = "MinSizeRel"
    options.CMAKE_SYSTEM_NAME = "Android"
    options.CMAKE_SYSROOT= "${ndkDir}/platforms/android-${ndkApiLevel}/arch-arm"
    options.CMAKE_TOOLCHAIN_FILE="${ndkDir}/build/cmake/android.toolchain.cmake"
    options.ANDROID_NDK="${ndkDir}"
    options.ANDROID_TOOLCHAIN = "${ndkToolchain}"
    options.ANDROID_NATIVE_API_LEVEL = "${ndkApiLevel}"
    options.ANDROID_FORCE_ARM_BUILD = "OFF"
    options.ANDROID_STL = "${ndkstl}"

    if (isWindows()) {
        options.CMAKE_MAKE_PROGRAM = "${rootProject.projectDir}/tools/ninja/ninja.exe"
    } else {
        options.CMAKE_MAKE_PROGRAM = "${rootProject.projectDir}/tools/ninja/ninja"
    }

    for (Enumeration en = localProperties.propertyNames(); en.hasMoreElements();) {
        String key = en.nextElement();
        if(key.startsWith("def.")) {
            options[key.substring(4)] = localProperties.getProperty(key);
        }
    }

    buildConfig = options.CMAKE_BUILD_TYPE
    jobCount = "auto"
}

String defineVariantTask(String name, String platform_) {

    tasks.register("configure-${name}-${platform_}", net.freudasoft.CMakeConfigureTask) {
       group = "$name"

       configureFromProject()

       generator = "Ninja"

       options.ANDROID_ABI = platform_
       options.PLATFORM = platform_

       workingFolder = file("$buildDir/cmake-${name}-${platform_}")
    }

    tasks.register("build-${name}-${platform_}", net.freudasoft.CMakeBuildTask) {
        group = "$name"

        configureFromProject()

        buildClean = true

        workingFolder = file("$buildDir/cmake-${name}-${platform_}")
    }

    tasks.getByName("build-${name}-${platform_}").dependsOn(["configure-${name}-${platform_}"])

    return "build-${name}-${platform_}";
}

String defineVariantTask2(String name, String platform_, String prop_name, String prop_path) {

    Properties localProperties = getCombinedProperties([prop_path])

    tasks.register("configure-${name}-${platform_}-${prop_name}", net.freudasoft.CMakeConfigureTask) {
       group = "$name"

       configureFromProject()

       generator = "Ninja"

       for (Enumeration en = localProperties.propertyNames(); en.hasMoreElements();) {
            String key = en.nextElement();
            if(key.startsWith("def.")) {
                options[key.substring(4)] = localProperties.getProperty(key);
            }
        }

       options.ANDROID_ABI = platform_
       options.PLATFORM = platform_
       options.FRIEND_NAME = prop_name

       workingFolder = file("$buildDir/cmake-${name}-${platform_}-${prop_name}")
    }

    tasks.register("build-${name}-${platform_}-${prop_name}", net.freudasoft.CMakeBuildTask) {
        group = "$name"

        configureFromProject()

        buildClean = true

        workingFolder = file("$buildDir/cmake-${name}-${platform_}-${prop_name}")
    }

    tasks.getByName("build-${name}-${platform_}-${prop_name}").dependsOn(["configure-${name}-${platform_}-${prop_name}"])

    return "build-${name}-${platform_}-${prop_name}";
}

def build_default_targets = [
    defineVariantTask("android", "armeabi-v7a"),
    defineVariantTask("android", "arm64-v8a")
]

fileTree(dir: "${project.projectDir}/properties", include: '**/*.properties').each {File file ->

    def prop_name = basename(file.getName())

    def build_all_targets = [
        defineVariantTask2("android", "armeabi-v7a", prop_name, file.getAbsolutePath()),
        defineVariantTask2("android", "arm64-v8a", prop_name, file.getAbsolutePath())
    ]

    tasks.register("build-android-all-${prop_name}") {
        group = "android"
        description = "build all task defined in this group."

        dependsOn build_all_targets
    }
}

tasks.register("build-android-all") {
    group = "android"
    description = "build all task defined in this group."

    dependsOn build_default_targets
}

def build_targets_extras = [
    defineVariantTask("android", "x86"),
    defineVariantTask("android", "x86_64")
]

tasks.register("build-android-all-extras") {
    group = "android"
    description = "build all task defined in this group."

    dependsOn build_targets_extras
}

if (!isWindows()) {
    exec {
         ExecSpec execSpec ->
         executable  "chmod"
         args "+x", "${rootProject.projectDir}/tools/ninja/ninja"
         ignoreExitValue true
    }

    exec {
         ExecSpec execSpec ->
         executable  "chmod"
         args "+x", "${rootProject.projectDir}/tools/cmake/bin/cmake"
         ignoreExitValue true
    }
}