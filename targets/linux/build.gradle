apply plugin: "net.freudasoft.gradle-cmake-plugin"

cmake {
    sourceFolder = projectDir
    buildClean = true
    jobCount = "auto"
}

String defineVariantTask(String name, String platform_, String prop_path) {

    Properties localProperties = getCombinedProperties(["local", "linux", prop_path])

    tasks.register("configure-${name}-${platform_}", net.freudasoft.CMakeConfigureTask) {
        group = "$name"

        configureFromProject()

        if (localProperties.containsKey("toolchain.path")) {
            options.CMAKE_TOOLCHAIN_FILE = localProperties.getProperty("toolchain.path", "")
        } else if (localProperties.containsKey("gcc.dir")) {
            def gccDir = localProperties.getProperty("gcc.dir", "/usr")
            def gccPrefix = localProperties.getProperty("gcc.prefix", "")
            def gccSuffix = localProperties.getProperty("gcc.suffix", "")

            options.CMAKE_C_COMPILER = "${gccDir}/bin/${gccPrefix}gcc${gccSuffix}"
            options.CMAKE_CXX_COMPILER = "${gccDir}/bin/${gccPrefix}g++${gccSuffix}"
        }

        options.PLATFORM = localProperties.getProperty("toolchain.platform", "")

        def cmakeDir = localProperties.getProperty("cmake.dir", "${rootProject.projectDir}/tools/cmake")
        executable = "${cmakeDir}/bin/cmake"

        options.CMAKE_SYSTEM_NAME = "Linux"
        options.CMAKE_BUILD_TYPE = "MinSizeRel"

        if (localProperties.containsKey("wsl.distribution")) {
            distribution = localProperties.getProperty("wsl.distribution", "Ubuntu-16.04")
        }

        for (Enumeration en = localProperties.propertyNames(); en.hasMoreElements();) {
            String key = en.nextElement();
            if(key.startsWith("def.")) {
                options[key.substring(4)] = localProperties.getProperty(key);
            }
        }

        if(options.getAt("PLATFORM").getOrElse("") == "") {
            options.PLATFORM = platform_
        }

        workingFolder = file("$buildDir/cmake-${name}-${platform_}")
    }

    tasks.register("build-${name}-${platform_}", net.freudasoft.CMakeBuildTask) {
        group = "$name"

        configureFromProject()

        buildConfig = localProperties.getProperty("def.CMAKE_BUILD_TYPE", "MinSizeRel");

        if (localProperties.containsKey("wsl.distribution")) {
            distribution = localProperties.getProperty("wsl.distribution", "Ubuntu-16.04")
        }

        workingFolder = file("$buildDir/cmake-${name}-${platform_}")
    }

    tasks.register("build-${name}-${platform_}-only", net.freudasoft.CMakeBuildTask) {
        group = "$name"

        configureFromProject()

        buildConfig = localProperties.getProperty("def.CMAKE_BUILD_TYPE", "MinSizeRel");

        if (localProperties.containsKey("wsl.distribution")) {
            distribution = localProperties.getProperty("wsl.distribution", "Ubuntu-16.04")
        }

        buildClean = false

        workingFolder = file("$buildDir/cmake-${name}-${platform_}")
    }

    tasks.getByName("build-${name}-${platform_}").dependsOn("configure-${name}-${platform_}")

    if (localProperties.containsKey("dependsOn")) {
        String  dependsOn_ = localProperties.getProperty("dependsOn", "")

        def dependsOnList = []
        for(String item: dependsOn_.split(",")) {
            def task_name = item.trim();
            dependsOnList.add("build-${name}-${task_name}")
        }

         tasks.getByName("build-${name}-${platform_}").dependsOn(dependsOnList)
    }

    return "build-${name}-${platform_}"
}

String basename(String filename) {
    int p = filename.lastIndexOf('/');
    if (p >= 0) {
        filename = filename.substring(p + 1);
    }
    p = filename.lastIndexOf('.');
    if (p >= 0) {
        filename = filename.substring(0, p);
    }
    return filename;
}

fileTree("${project.projectDir}/properties").include('**/*.properties').each {File file ->
    defineVariantTask("linux", basename(file.getName()), file.getAbsolutePath())
}

def build_targets = [
    defineVariantTask("linux", "x86", "x86"),
    defineVariantTask("linux", "x64", "x64")
]

defineVariantTask("linux", "custom", "custom")

tasks.register("build-linux-all") {
    group = "linux"
    description = "build all task defined in this group."

    dependsOn build_targets
}

if (!isWindows()) {
    exec {
         ExecSpec execSpec ->
         executable  "chmod"
         args "+x", "${rootProject.projectDir}/tools/ninja/ninja"
         ignoreExitValue true
    }

    exec {
         ExecSpec execSpec ->
         executable  "chmod"
         args "+x", "${rootProject.projectDir}/tools/cmake/bin/cmake"
         ignoreExitValue true
    }
}