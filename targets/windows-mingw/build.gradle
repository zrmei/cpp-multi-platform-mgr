apply plugin: "net.freudasoft.gradle-cmake-plugin"

def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

cmake {
    Properties localProperties = getCombinedProperties(["local", "mingw"])

    def postfix = isWindows() ? ".exe" : ""

    if (localProperties.containsKey("toolchain.path")) {

        options.CMAKE_TOOLCHAIN_FILE = localProperties.getProperty("toolchain.path", "")

    } else if (localProperties.containsKey("mingw.dir")) {
        def mingwDir = localProperties.getProperty("mingw.dir")
        def gccPrefix = localProperties.getProperty("gcc.prefix", "")
        def gccSuffix = localProperties.getProperty("gcc.suffix", "")

        options.CMAKE_C_COMPILER = "${mingwDir}/bin/${gccPrefix}gcc${gccSuffix}${postfix}"
        options.CMAKE_CXX_COMPILER = "${mingwDir}/bin/${gccPrefix}g++${gccSuffix}${postfix}"
        options.CMAKE_MAKE_PROGRAM = isWindows() ? "${mingwDir}/bin/mingw32-make${postfix}": "make"
    }

    if (localProperties.containsKey("cmake.dir")) {
        def cmakeDir = localProperties.getProperty("cmake.dir")
        executable = "$cmakeDir/bin/cmake${postfix}"
    } else {
        executable = "cmake"
    }

    sourceFolder = projectDir

    options.CMAKE_SYSTEM_NAME = "Windows"
    options.CMAKE_BUILD_TYPE = "MinSizeRel"

    if (localProperties.containsKey("toolchain.platform")) {
        options.PLATFORM = localProperties.getProperty("toolchain.platform", "unknown")
    }

    for (Enumeration en = localProperties.propertyNames(); en.hasMoreElements();) {
        String key = en.nextElement();
        if(key.startsWith("def.")) {
            options[key.substring(4)] = localProperties.getProperty(key);
        }
    }

    buildConfig = options.CMAKE_BUILD_TYPE
    buildClean = true
    jobCount = "auto"
}

String defineVariantTask(String name, String platform_) {
    tasks.register("configure-${name}-${platform_}", net.freudasoft.CMakeConfigureTask) {
        group = "$name"
        configureFromProject()

        generator = isWindows() ? "MinGW Makefiles" : "Unix Makefiles"

        workingFolder = file("$buildDir/cmake-${name}-${platform_}")
    }

    tasks.register("build-${name}-${platform_}", net.freudasoft.CMakeBuildTask) {
        group = "$name"

        configureFromProject()

        workingFolder = file("$buildDir/cmake-${name}-${platform_}")
    }

    tasks.getByName("build-${name}-${platform_}").dependsOn(tasks.getByName("configure-${name}-${platform_}"))

    return "build-${name}-${platform_}";
}


def build_targets = [
    defineVariantTask("mingw", "custom")
]
